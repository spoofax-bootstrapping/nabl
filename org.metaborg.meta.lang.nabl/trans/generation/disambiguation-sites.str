module disambiguation-sites

imports
  libstrc
  generation/-
  
  // NaBL
  signatures/NameBindingLanguage-sig
  signatures/core/-
  signatures/formulas/-
  
  // Stratego
  signatures/Stratego-Core-Terms-sig
  signatures/Stratego-Core-Signatures-sig
  signatures/Stratego-Core-Strategies-sig
  signatures/Stratego-Sugar-Terms-sig
  signatures/Stratego-Sugar-Strategies-sig
  signatures/Stratego-Sugar-Rules-sig
  
rules
      
  binding-to-filter-rule(|var*, r):
    BindingRule(pattern, _, clause*) -> FILTER_RULE(pattern, <to-seq> cclause*)
    where 
      cclause* := <filterconcat(to-filter-clauses(|var*, r, pattern)); nonempty> clause*
     
  to-filter-clauses(|var*, r, pattern):
    FilterClause(ns, term, Filter(ff), f) -> [task, cong]
    with
      task  := <formula-to-tasks(?fvar*|var*, [], pattern)> f
    ; tvar* := <collect-all(?Var(_) + ?ListVar(_))> term
    ; dep*  := <diff> (fvar*, tvar*)
    ; ftask := <formula-to-tasks(|dep*, [], r)> ff
    ; fseq  := Seq(ftask, Build(TUPLE([term, RootApp(Id())])))
    ; key := <new-key(|"filter")> r
    ; <iset-add(|CREATE_FILTER_RULE(key, dep*, term, fseq))> r   
    ; cong := <replace-all-id(|[(term, FILTER_CALL(key, dep*))])> pattern
    
rules
      
  binding-to-disambiguation-rule(|var*, r):
    BindingRule(pattern, constr*, clause*) -> DISAMBIGUATION_RULE(pattern, <to-seq> dclause*)
    where 
       dclause* := <filter(to-disambiguation-clauses(|var*, r, pattern)); nonempty; concat> clause*
     
  to-disambiguation-clauses(|var*, r, pattern):
    DisambiguateClause(ns, term, Filter(ff), d, f) -> [task, cong]
    with
      task  := <formula-to-tasks(?fvar*|var*, [], r)> f
    ; ftask := <formula-to-tasks(|fvar*, [], r)> ff
    ; dtask := <disambiguator-to-task(|term)> d
    ; tvar* := <collect-all(?Var(_) + ?ListVar(_))> term
    ; dep*  := <diff> (fvar*, tvar*)
    ; key   := <new-key(|"disamb")> r
    ; <iset-add(|CREATE_DISAMBIGUATION_RULE(key, dep*, term, ftask, dtask))> r
    ; cong  := <replace-all-id(|[(term, DISAMBIGUATION_CALL(key, dep*))])> pattern
  
  disambiguator-to-task(|term):
    MinimalDistance(t1, rel, t2) -> NEW_TASK([PREV()], TERM("RelationDistance", [Str(rel), t1, t2]))
    
overlays

  FILTER_RULE(pattern, body)  =
  STRATEGY(
    "nabl-filtering-site"
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__")
    ]
  , Seq(Match(pattern), body)
  )

  FILTER_CALL(string, ts) = 
  CALL("nabl-filter", [Var("lang__"), CTX(), Var("uris__"), Str(string), LIST(ts)])

  CREATE_FILTER_RULE(string, deps, name, body) = 
  STRATEGY(
    "nabl-filter-def"
  , [ CTX_DEC()
    , DefaultVarDec("ctx-terms__")
    , DefaultVarDec("ctx-string__")
    ]
  , Seq(
      Match(name)
    , Seq(
	      Where(Assign(Str(string), Var("ctx-string__")))
	    , Seq(
	        Where(Assign(LIST(deps), Var("ctx-terms__")))
	      , body
	      )
	    )
	  )
  ) 
  
  DISAMBIGUATION_RULE(pattern, body)  =
  STRATEGY(
    "nabl-disambiguation-site"
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__")
    ]
  , Seq(Match(pattern), body)
  )
  
  DISAMBIGUATION_CALL(string, ts) = 
  CALL("nabl-disambiguate", [Var("lang__"), CTX(), Var("uris__"), Str(string), LIST(ts)])
  
  CREATE_DISAMBIGUATION_RULE(string, deps, name, ftask, disamb) = 
  STRATEGY(
    "nabl-disambiguate-def"
  , [ CTX_DEC()
    , DefaultVarDec("uris__")
    , DefaultVarDec("ctx-terms__")
    , DefaultVarDec("ctx-string__")
    ]
  , Seq(
      Match(name)
    , Seq(
        Where(Assign(Str(string), Var("ctx-string__")))
      , Seq(
          Where(Assign(LIST(deps), Var("ctx-terms__")))
        , Seq(
            ftask
          , Seq(Match(PREV()), Build(TUPLE([name, disamb])))
          )
        )
      )
    )
  ) 

