module generation/import-sites

imports
  generation/-
  
  // NaBL
  signatures/NameBindingLanguage-sig
  signatures/core/-
  signatures/formulas/-
  
  // Stratego
  signatures/Stratego-Core-Terms-sig
  signatures/Stratego-Core-Signatures-sig
  signatures/Stratego-Core-Strategies-sig
  signatures/Stratego-Sugar-Terms-sig
  signatures/Stratego-Sugar-Strategies-sig
  signatures/Stratego-Sugar-Rules-sig
  
rules
                     
	
  import-to-name = 
    ?RefClause(<fetch-elem(import-to-name)>)
  + ?ImportClause(<fetch-elem(import-to-name)>)
  + ?SingleImport(_, _, <id>, _, _, _, _, _)
  + ?WildcardImport(_, _, Context(_, _, <id>, _, _), _, _)
	    
  binding-to-import-rule(|var*, r):
    BindingRule(pattern, constr*, clause*) -> IMPORT_RULE(pattern, seq)
    where 
      cong* := <filter(to-import-clauses(|var*, r, pattern)); nonempty> clause*
    ; seq   := <to-seq> cong*
  
  to-import-clauses(|var*, r, pattern):
    ImportClause(part*) -> IMPORT_CALL(cand*)
    with
      cand* := <filter(to-import-candidate(|var*, r, pattern)); nonempty> part*
    
  to-import-candidate(|var*, r, pattern):
    SingleImport(_, ns, term, _, _, alias, into, f) -> cand
    with
      into-term := <scope-to-term> into
    ; task      := <formula-to-tasks(?fvar*|var*, [], r)> f
    ; dep*      := <diff; map(?Var(<id>))> (fvar*, var*)
    with
       Alias(a) := alias
     ; cand     := ALIAS(dep*, task, term, a, [])
    <+ cand     := SINGLE(dep*, task, <ns-to-term> ns, term, into-term, [])
       
	to-import-candidate(|var*, r, pattern):
		WildcardImport(ns*, _, from, into, f) -> WILDCARD(dep*, task, ns-term*, from-term, into-term, [])
    with
      ns-term*  := <map(ns-to-term)> ns*
    ; from-term := <scope-to-term> from
    ; into-term := <scope-to-term> into
    ; task      := <formula-to-tasks(?fvar*|var*, [], r)> f
    ; dep*      := <diff; map(?Var(<id>))> (fvar*, var*)
      
	ns-to-term: Restricted([], ns)           -> DIRECT(<ns-to-term> ns)
	ns-to-term: Restricted([Imported()], ns) -> TRANSITIVE(<ns-to-term> ns)	
    
overlays
     
  IMPORT_RULE(pattern, body) =
  SDefT(
    "nabl-import-site"
  , []
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__") 
    ]
  , Seq(Match(pattern), FORCE_ORIGINS(body))
  )
  
  IMPORT_CALL(imports) =
  CallT(
    SVar("nabl-import")
  , []
  , [ Var("lang__")
    , CTX()
    , Var("uniques__")
    , Var("uris__")
    , LIST(imports)
    ] 
  )
  
  SINGLE(vs, task, ns, term, scope, deps) = 
    RootApp(Scope(vs, Seq(task, Build(TERM("Single", [ns, term, scope, LIST(deps)])))))
    
  ALIAS(vs, task, term, alias, deps) = 
    RootApp(Scope(vs, Seq(task, Build(TERM("Alias", [term, alias, LIST(deps)])))))
    
  WILDCARD(vs, task, ns, from, into, deps) = 
    RootApp(Scope(vs, Seq(task, Build(TERM("Wildcard", [LIST(ns), from, into, LIST(deps)])))))

  DIRECT(ns)     = TERM("Import", [Var("lang__"), ns])
  TRANSITIVE(ns) = TERM("Import", [Var("lang__"), TERM("Imported", [ns])])
