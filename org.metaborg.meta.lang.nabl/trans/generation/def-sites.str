module generation/def-sites

imports
  libstrc
  generation/-
  
  // NaBL
  signatures/NameBindingLanguage-sig
  signatures/core/-
  signatures/formulas/-
  
  // Stratego
  signatures/Stratego-Core-Terms-sig
  signatures/Stratego-Core-Signatures-sig
  signatures/Stratego-Core-Strategies-sig
  signatures/Stratego-Sugar-Terms-sig
  signatures/Stratego-Sugar-Strategies-sig
  signatures/Stratego-Sugar-Rules-sig
  
rules
  
  def-to-name = ?DefClause(Explicit(), _, _, <id>, _, _, _)
    
rules
  
  binding-to-name-rules: 
    BindingRule(pattern, _, clause*) -> [NAME_RULE(pattern, name), APPLY_RULE(body)]
    where
      [name] := <filter(def-to-name + use-to-name)> clause*
    ; <not(eq)> (name, pattern)
    ; body   := <replace-all-id(|[(name, CALL("s"))])> pattern
      
  binding-to-def-rules:
    BindingRule(pattern, _, clause*) -> [DEF_RULE(pattern, seq), ext*]
    where
      def-clause* := <filter-def-clauses; nonempty> clause*
    ; implicit*   := <implicit-def-vars> def-clause*
    ; ns-term*    := <filterconcat(?ScopeClause(<map(ns-to-term)>))> clause*
    ; nt-ns-term* := <filterconcat(?NonTransitiveScopeClause(<map(ns-to-term)>))> clause*    
    ; cong*       := <filter-with-index(to-def-cong(|pattern, ns-term*, nt-ns-term*))> def-clause*
    ; m           := <length> def-clause*
    ; uri-cvar    := <uri-child-var> m
    ; uri-svar    := <uri-sibl-var> m
    ; seq         := <to-seq> [ cong*
                              , MATCH(CALL("child-uris__"), uri-cvar)
                              , MATCH(CALL("sibl-uris__"), uri-svar)
                              , MATCH(CALL("implicits__"), LIST(implicit*))
                              ] 
    where
       extseq := <filter-with-index(clause-to-aliases(|pattern, implicit*)); concat; nonempty; at-end(![Fail()]); to-seq> def-clause*  
     ; ext*   := [EXTERNAL_DEF_RULE(pattern, extseq)]
    <+ ext*   := []
                               
  clause-to-aliases(|pattern, implicit*):
    (i, DefClause(kind, _, _, term, _, DefScopes(scope*), _)) -> [match*, EXTERNAL_URI_CALL(u, named), alias*]
    where
      u := <uri-var> i
    ; alias* := <filter(scope-to-alias(|u)); nonempty> scope*
    where
       Implicit() := kind
     ; match*     := [ Where(Assign(LIST(implicit*), Var("implicits__"))) ]
     ; named      := <implicit-def-var> i        
    <+ match* := []
     ; named  := term
      
  scope-to-alias(|uri):
    DefScope(scope) -> EXTERNAL_ALIAS_CALL(uri, scope)
     
  uri-var: i-> Var($[uri[i]__])
  alias-var: i-> Var($[alias[i]__])
  
  to-def-cong(|pattern, scope*, nt-scope*):
    (o, clause) -> def-cong
    where
      DefClause(Explicit(), unique, ns, term, _, scope, _) := clause
    ; scope'*    := scope*
    ; nt-scope'* := nt-scope*
    + DefClause(Implicit(), unique, ns, term, _, scope, _) := clause
    ; scope'*     := []
    ; nt-scope'*  := []
    ; impl-var    := <implicit-def-var> o 
    + SingleImport(_, ns, _, _, _, Alias(term), scope, _)  := clause
    ; unique     := Unique()
    ; scope'*    := [] // TODO is this correct?
    ; nt-scope'* := [] // TODO is this correct?
    where
      ns-term     := <ns-to-term> ns
    ; unique-term := <nabl-to-str> unique
    ; scope-term  := <scope-to-term> scope
    ; i           := <dec> o
    ; uri-cvar1   := <uri-child-var> i
    ; uri-cvar2   := <uri-child-var> o
    ; uri-svar1   := <uri-sibl-var> i
    ; uri-svar2   := <uri-sibl-var> o
    ; def-call    := DEF_CALL(ns-term, unique-term, scope-term, scope'*, nt-scope'*, uri-cvar1, uri-svar1, uri-cvar2, uri-svar2)
    where
       def-cong := Where(Assign(impl-var, App(def-call, term)))
    <+ def-cong := <add-force-origins; replace-all-id(|[(term, def-call)])> pattern
  
rules
  
  filter-def-clauses =
    filter(
      ?DefClause(_, _, _, _, _, _, _) 
    + ?Import(<fetch-elem(?SingleImport(_, _, _, _, _, Alias(_), _, _))>)
    )
      
  implicit-def-vars = 
    filter-with-index(
      ?(<implicit-def-var>, DefClause(Implicit(), _, _, _, _, _, _))
    )
    
  implicit-def-var = !Var($[i-[<id>]__])
  
  nabl-to-str: NonUnique() -> TERM("NonUnique")
  nabl-to-str: Unique()    -> TERM("Unique")
  
  uri-var(|kind): 0 -> Var($[uri__])
  uri-var(|kind): i -> Var($[[kind]-uri[i]__]) where not(?0)
   
  uri-child-var = uri-var(|"c")
  uri-sibl-var  = uri-var(|"s")

        
overlays
  
  NAME_RULE(lhs, rhs) = RDefNoArgs("nabl-get-name", RuleNoCond(lhs, rhs))
  
  APPLY_RULE(body) = SDef("nabl-name-apply", [DefaultVarDec("s")], body)
  
overlays
  
  DEF_RULE(pattern, body) =
  SDefT(
    "nabl-def-site"
  , [ DefaultVarDec("child-uris__")
    , DefaultVarDec("sibl-uris__")
    , DefaultVarDec("implicits__")
    ]
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uri__")
    , DefaultVarDec("states__")]
  , Seq(Match(pattern), body)
  )  
  
  DEF_CALL(ns, u, ds, s, nt-s, in-child-uris, in-sibl-uris, out-child-uris, out-sibl-uris) = 
  CALL(
    "nabl-def"
  , [Match(out-child-uris), Match(out-sibl-uris)]
  , [ Var("lang__")
    , CTX()
    , Var("uniques__")
    , in-child-uris
    , in-sibl-uris
    , ns, u, ds, LIST(s), LIST(nt-s)]
  )
  
  MATCH(s, v) =
  CALL("match", [s], [v])

  EXTERNAL_DEF_RULE(pattern, body) =
  SDefT(
    "nabl-external-def-site"
  , []
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uri__")
    , DefaultVarDec("states__")
    , DefaultVarDec("implicits__")]
  , Seq(Match(pattern), body)
  ) 
  
  EXTERNAL_URI_CALL(v, named) = 
  Assign(v, App(CALL("nabl-uri"), named))
  
  EXTERNAL_ALIAS_CALL(uri, scope) = 
  App(CALL("nabl-def-alias", [CTX(), uri]), scope)
  