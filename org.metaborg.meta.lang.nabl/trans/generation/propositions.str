module generation/propositions

imports
  generation/-
  
  // NaBL
  signatures/NameBindingLanguage-sig 
  signatures/core/-
  signatures/formulas/-
  signatures/terms/-
  
  // Stratego
  signatures/Stratego-Core-Terms-sig
  signatures/Stratego-Core-Signatures-sig
  signatures/Stratego-Core-Strategies-sig
  signatures/Stratego-Core-Modules-sig
  signatures/Stratego-Sugar-Terms-sig
  signatures/Stratego-Sugar-Strategies-sig
  signatures/Stratego-Sugar-Rules-sig
  signatures/Stratego-Sugar-Modules-sig

rules
  
  formula-to-tasks(|var*, dep, r)  = formula-to-tasks(id|var*, dep, r)
  formula-to-tasks(s|var*, dep, r) = formula-to-tasks(|dep); where(<s> var*)
  
  formula-to-tasks(|dep): 
    True()  -> NEW_TASK(dep, TERM("Id", [TUPLE([])]))
  
  formula-to-tasks(|dep): 
    False() -> NEW_TASK(dep, TERM("Fail", []))
   
  formula-to-tasks(|dep): 
    Eq(v, t) -> NEW_TASK(dep, TERM("Eq", [t, v]))
	
	formula-to-tasks(s|var*, dep, r):
    DefOf(v, d) -> Assign(d, NEW_TASK(dep, TERM("CollectDefs", [v])))
    with
      <s> [d, var*]
      
  formula-to-tasks(s|var*, dep, r):
    ScopeOf(s, v) -> Assign(v, <scope-to-str(|dep)> s)
    with
      <s> [v, var*]
    
  formula-to-tasks(s|var*, dep, r):
    DefOf(t, ns, v) -> Assign(v, NEW_TASK(dep, TERM("CheckDefs", [ns', App(COLLECT_USE(), t)])))
    with
      ns' := <ns-to-term> ns
    ; <s> [v, var*]
  
  formula-to-tasks(s|var*, dep, r):
  	ResolvesTo(t, ns, v) -> Assign(v, App(CALL("nabl-use-candidate", [ Var("lang__"), CTX(), Var("uris__"), App(CALL("nabl-fix-name"), t)]), candidate))
  	where
  	  candidate := CANDIDATE(dep, Id(), <ns-to-term> ns, [], TERM("Current"), TERM("True"), [])
  	; <s> [v, var*]
  	  
  formula-to-tasks(s|var*, dep, r):
    HasProperty(v1, p, v2) -> Assign(v2, NEW_TASK(dep, TERM("Id", [TASK("get-or-create-property-task", [p'], v1)])))
    with
      p':= <prop-to-term> p
    ; <s> [v2, var*]
  
  formula-to-tasks(s|var*, dep, r):
    PropertyPattern(v, prop, p) -> Scope(["p__"], t)
    with
      t := <formula-to-tasks(s|var*, dep, r)> And(HasProperty(v, prop, Var("p__")), Match(Var("p__"), p))
     
  formula-to-tasks(|dep):
    InRelation(t1, rel, t2) -> APP(CALL("relation-create-match", [CTX(), Str(rel), t1, LIST(dep)]), t2)
       
rules

	formula-to-tasks(s|var*, dep, r):
    Match(v, p) -> result 
    with 
	    v* := <collect(?Var(_) + ?ListVar(_))> p
	  ; <s> [v*, var*]
	  with
	     result := <nonempty; map(var-to-match-task(|var*, dep, r, v, p)); to-seq> v*
	  <+ key := <new-key(|"match")> r
	   ; <iset-add(|MATCH_RULE(key, p, var*))> r
	   ; result := NEW_TASK(dep, TERM("Rewrite", [Str(key), v]))
  
  var-to-match-task(|var*, dep, r, t, p):
  	v -> Assign(v, NEW_TASK(dep, TERM("Rewrite", [Str(key), t])))
    with
      key := <new-key(|"match")> r
    ; <iset-add(|MATCH_RULE(key, p, v, var*))> r
      
  new-key(|base) =
    iset-elements
  ; length
  ; <conc-strings> (base, <int-to-string>)
   
overlays
	
	TASK(s, t)      = TASK(s, [], t)
  TASK(s, ts, t)  = App(CALL(s, [CTX()|ts]), t)
  NEW_TASK(dep, task) = App(CALL("new-task-fixdeps", [CTX(), LIST(dep)]), task)
  COLLECT_USE = CALL("try", [ Seq(CALL("nabl-collect-use"), Match(TERM("Use", [RootApp(Id())])))], [])
	
  MATCH_RULE(key, lhs, dep)      = SDefNoArgs("task-rewrite", Match(TUPLE([Str(key), lhs])))
  MATCH_RULE(key, lhs, rhs, dep) = RDefNoArgs("task-rewrite", RuleNoCond(TUPLE([Str(key), lhs]), rhs))
