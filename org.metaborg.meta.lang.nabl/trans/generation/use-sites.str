module generation/use-sites

imports
  generation/-
  
  // NaBL
  signatures/NameBindingLanguage-sig 
  signatures/core/-
  signatures/formulas/-
  signatures/terms/-
  
  // Stratego
  signatures/Stratego-Core-Terms-sig
  signatures/Stratego-Core-Signatures-sig
  signatures/Stratego-Core-Strategies-sig
  signatures/Stratego-Core-Modules-sig
  signatures/Stratego-Sugar-Terms-sig
  signatures/Stratego-Sugar-Strategies-sig
  signatures/Stratego-Sugar-Rules-sig
  signatures/Stratego-Sugar-Modules-sig
  
rules
  
  use-to-name = 
    ?RefClause(<fetch-elem(use-to-name)>)
  + ?ImportClause(<fetch-elem(use-to-name)>)
  + ?RefClausePart(_, _, <id>, _, _, _)
  + ?SingleImport(_, _, <id>, _, _, _, _, _)
  + ?WildcardImport(_, _, Context(_, _, <id>, _, _), _, _)
    
  binding-to-use-rule(|var*, r):
    BindingRule(pattern, _, clause*) -> USE_RULE(pattern, seq)
    where 
      use-clause* := <filter(to-use-clauses(|var*, r, pattern)); nonempty> clause*
    ; seq         := <to-seq> use-clause*
      
  to-use-clauses(|var*, r, pattern):
    clause -> cong
    where
      RefClause(part*)    := clause
    + ImportClause(part*) := clause
    where // might fail if an import clause has no name in it
      c*       := <filter(to-use-candidate(|var*, r))> part*
    ; term     := <use-to-name> clause
    ; use-call := USE_CALL(c*)
    ; cong     := <add-force-origins; replace-all-id(|[(term, use-call)])> pattern
  
  to-use-candidate(|var*, r):
    part -> CANDIDATE(dep*, task, ns-term, prop-term*, ctx-term, wci, [])
    where
      (RefClausePart(disamb, ns, term, prop*, ctx, f)                            := part; import-ns* := [])
    + (SingleImport(disamb, ns, term, prop*, ctx, alias, _, f)                   := part; import-ns* := [])
    + WildcardImport(import-ns*, _, Context(disamb, ns, term, prop*, ctx), _, f) := part
    with
      ns-term    := <ns-to-term> ns
    ; task       := <formula-to-tasks(?fvar*|var*, [], r)> f
    ; dep*       := <diff; map(?Var(<id>))> (fvar*, var*)
    ; prop-term* := <map(prop-pattern-to-str(|[]))> prop*
    ; ctx-term   := <scope-to-term> ctx
    ; wci        := <part-to-wildcardimport(|import-ns*)> part
    
  prop-pattern-to-str(|dependencies): PropertyPattern(type, p, t) -> PROPERTY(<prop-to-term> p, t, dependencies) 
  
  part-to-wildcardimport(|import-ns*):
    RefClausePart(_, _, _, _, _, _) -> TERM("True")

  part-to-wildcardimport(|import-ns*):
    SingleImport(_, _, _, _, _, _, _, _) -> TERM("True")
    
  part-to-wildcardimport(|import-ns*):
    WildcardImport(_, _, Context(_, ns, _, _, _), _, _) -> TERM("False")
    where
      <collect-one(?ns)> import-ns*
      
  part-to-wildcardimport(|import-ns*):
    WildcardImport(_, _, Context(_, ns, _, _, _), _, _) -> TERM("True")
    where
      not(<collect-one(?ns)> import-ns*)

  // to-match-rules(|bound*, i):
  //   (j, RefClause(part*)) -> rule*
  //   where
  //     k      := <extend-index(|i)> j
  //   ; rule*  := <map-with-index(to-match-rules(|bound*, k)); concat> part*
  // 
  // to-match-rules(|bound*, i):
  //   (j, RefClausePart(disamb, ns, term, prop*, scope, constr*)) -> rule*
  //   where
  //     k     := <extend-index(|i)> j
  //   ; rule* := <constraints-to-match-rules(|bound*, k, 1)> constr*

overlays
     
  USE_RULE(pattern, body) =
  STRATEGY(
    "nabl-use-site"
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
		, DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__") 
    ]
  , Seq(Match(pattern), body)
  )
  
  USE_CALL(candidates) =
  CALL(
    "nabl-use"
  , [ Var("lang__")
    , CTX()
		, Var("uniques__")
    , Var("uris__")
    , LIST(candidates)
    ] 
  )
  
  CANDIDATE(vs, task, ns, ps, ctx, wci, deps) = 
    RootApp(Scope(vs, Seq(task, Build(TERM("UseCandidate", [ns, LIST(ps), ctx, wci, LIST(deps)])))))
  