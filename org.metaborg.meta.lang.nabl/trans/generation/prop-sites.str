module generation/prop-sites

imports
  generation/-
  
  // NaBL
  signatures/NameBindingLanguage-sig 
  signatures/core/-
  signatures/formulas/-
  signatures/terms/-
  
  // Stratego
  signatures/Stratego-Core-Terms-sig
  signatures/Stratego-Core-Signatures-sig
  signatures/Stratego-Core-Strategies-sig
  signatures/Stratego-Core-Modules-sig
  signatures/Stratego-Sugar-Terms-sig
  signatures/Stratego-Sugar-Strategies-sig
  signatures/Stratego-Sugar-Rules-sig
  
rules

  binding-to-prop-rule(|var*, r):
    BindingRule(pattern, f, clause*) -> PROP_RULE(pattern, seq)
    where
      def-clause*  := <filter-def-clauses; nonempty> clause*
    ; prop-clause* := <filter-with-index(to-prop-clauses(|var*, r, pattern)); concat; nonempty> def-clause*
    where
       match* := [Where(Assign(LIST(<implicit-def-vars; nonempty> def-clause*), Var("implicits__")))] 
    <+ match* := []
    with
      seq := <to-seq> [match*, prop-clause*]
    
  to-prop-clauses(|var*, r, pattern):
    (j, DefClause(kind, _, ns, term, prop*, _, f)) -> [Where(task), cong]
    where
      <nonempty> prop*
    with
      ns-term        := <ns-to-term> ns
    ; task           := <formula-to-tasks(|var*, [], r)> f
    ; prop-call      := PROP_CALL(<map(prop-to-str)> prop*)
    with
       Implicit() := kind
     ; cong := Where(App(prop-call, <implicit-def-var> j))
    <+ cong := <replace-all-id(|[(term, prop-call)])> pattern
            
rules
         
  prop-to-str: PropertyTerm(p, t)       -> PROPERTY(<prop-to-term> p, t)     
  prop-to-str: PropertyPattern(_, p, t) -> PROPERTY(<prop-to-term> p, t) 

overlays
  
  PROP_RULE(pattern, body)  =
  STRATEGY(
    "nabl-prop-site"
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__")
    , DefaultVarDec("implicits__")
    ]
  , Seq(Match(pattern), Seq(body, Fail()))
  )

  PROP_CALL(ps) = CALL("nabl-store-props", [CTX(), LIST(ps)])
  
  PROPERTY(kind, value) = TERM("Prop", [kind, value, LIST([])])

