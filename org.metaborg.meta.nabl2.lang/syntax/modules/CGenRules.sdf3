module modules/CGenRules

imports
 
  nabl2/shared/common/Identifiers
  nabl2/shared/common/Names
  nabl2/shared/common/Terms
  nabl2/shared/common/Types
  nabl2/shared/common/Vars

  common/Identifiers
  common/Types

template options

  keyword -/- [a-zA-Z0-9\']

context-free syntax

  ModuleSection.CGenRules = <
    constraint-generation rules
 
      <{CGenRule "\n"}*>
  > {longest-match}

  CGenRule.CGenRule = <
    <CGenMatch> :=
        <Constraint>
        <CGenNew>.
  >

  CGenMatch.CGenInit = <init [[ <Pattern> ]]>

  CGenNew.NoNew        =
  CGenNew.New          = <, new <{Var ","}+>>

  CGenName.NoName      =
  CGenName.Name        = RuleId

context-free syntax

  CGenMatch.CGenMatch    = <<CGenName> [[ <Pattern> <CGenParamsPattern> <CGenTypePattern> ]]>

  CGenParamsPattern.List = <^ (<{VarOrWld ","}*>)>

  CGenTypePattern.NoType =
  CGenTypePattern        = <: <TypePattern>>

context-free syntax

  Constraint.CGenRecurse = <<CGenName> [[ <Var> <CGenParamsTerm> <CGenTypeTerm> ]]>

  CGenParamsTerm.List    = <^ (<{TypeTerm ","}*>)>

  CGenTypeTerm.NoType    =
  CGenTypeTerm           = <: <TypeTerm>>

lexical syntax

  SectionKeyword = "constraint" | "generation" | "rules"
  Keyword        = "new"

 