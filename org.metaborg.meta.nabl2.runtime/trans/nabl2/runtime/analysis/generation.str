module nabl2/runtime/analysis/generation

imports

  nabl2shared
  nabl2/runtime/analysis/-

rules

  // top-level funtion that is called during analysis
  generate-constraint =
    ?ast;
    {| NewScope, NewVar:
	    scope-counter := <new-counter>;
	    var-counter   := <new-counter>;
	    rules( NewScope: _ -> <next-counter> scope-counter
	           NewVar:   _ -> <next-counter> var-counter
	         );
      <generate-constraint-init> ast
	  |}

  new-var   = (is-string <+ !"v") => n ; !Var($[[n]'[<NewVar;int-to-string>]])
  new-scope = !Scope(<NewScope;int-to-string>)

  // signatures of the generated rules
  generate-constraint-init-rule = fail
  generate-constraint-default-rule(|params) = fail
  generate-constraint-with-type-default-rule(|params,type) = fail

  // error throwing wrappers for recursive invocations
  generate-constraint(s|params) =
    generate-constraint-placeholder <+
    s(|params) <+
    fatal-err(|$[No suitable constraint generation rule defined with parameters [<pp-Term> params]])

  generate-constraint-with-type(s|params,type) =
    generate-constraint-placeholder <+
    s(|params,type) <+
    fatal-err(|$[No suitable constraint generation rule defined with parameters [<pp-Term> params] and type [<pp-Term> type]])

  generate-constraint-init =
    generate-constraint-placeholder <+
    generate-constraint-init-rule <+
    warn(|"Trying default init rule.");
    generate-constraint(generate-constraint-default-rule|[Global()]) <+
    fatal-err(|"No suitable constraint generation init rule found and default failed.")

  generate-constraint-placeholder =
    is-SDF-placeholder; !CTrue()

  debug-generate-constraint = fail
