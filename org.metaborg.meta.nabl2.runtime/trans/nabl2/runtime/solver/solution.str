module nabl2/runtime/solver/solution

imports

  nabl2shared
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

  signatures/nabl2/runtime/solver/-

rules
 
  sol-new =
    ts := <initial-subtype-relation>;
    !Sol(<G-new>,[],[],[],ts)

  sol-g = ?Sol(<id>,_,_,_,_) 
  sol-r = ?Sol(_,<id>,_,_,_) 
  sol-p = ?Sol(_,_,<id>,_,_)
  sol-s = ?Sol(_,_,_,<id>,_)
  sol-x = ?Sol(_,_,_,_,<id>)
 
  sol-with-g(|g):
    Sol(_,r*,p*,s*,x*) -> Sol(g,r*,p*,s*,x*)

  sol-apply-s(|s'):
    Sol(g,r*,p*,s*,x*) -> Sol(g',r'*,p'*,s'*,x*)
    where g'  := <S-apply(is-var)> (s',g)
        ; r'* := <S-apply(is-var)> (s',r*)
        ; p'* := <S-apply(is-var)> (s',p*)
        ; s'* := <S-compose(is-var)> (s',s*)
        ; x'* := <S-apply(is-var)> (s',x*)

  sol-set-p(|p,ty):
    Sol(g,r*,p*,s*,x*) -> Sol(g,r*,p'*,s*,x*)
  with p'* := <set(!ty|p)> p*

  sol-set-x(|x'*):
    Sol(g,r*,p*,s*,_) -> Sol(g,r*,p*,s*,x'*)

  sol-add-r(|r'*):
    Sol(g,r*,p*,s*,x*) -> Sol(g,[r'*,r*],p*,s*,x*)

  sol-set-r(|r,d):
    Sol(g,r*,p*,s*,x*) -> Sol(g,r'*,p*,s*,x*)
  with <set(!d|r)> r* => r'*

rules

  sol-wm-apply-s(|s) = fmap(sol-apply-s(|s)) ; fmap-messages(<S-apply(is-var)> (s,<id>))
